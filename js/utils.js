// Generated by CoffeeScript 2.5.1
var modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

import _ from 'https://cdn.skypack.dev/lodash';

import {
  createSignal,
  createEffect,
  createMemo
} from "https://cdn.skypack.dev/solid-js@1.2.6";

import {
  createStore
} from "https://cdn.skypack.dev/solid-js@1.2.6/store";

import h from "https://cdn.skypack.dev/solid-js@1.2.6/h";

import {
  render
} from "https://cdn.skypack.dev/solid-js@1.2.6/web";

export var signal = createSignal;

export var effect = createEffect;

export var memo = createMemo;

export var param = {};

param.String = (v) => {
  if (!_.isString(v)) {
    return console.log((new Error(v + " is not a String")).stack);
  } else {
    return v;
  }
};

param.Number = (v) => {
  if (!_.isNumber(v)) {
    return console.log((new Error(v + " is not a Number")).stack);
  } else {
    return v;
  }
};

param.Integer = (v) => {
  if (!_.isInteger(v)) {
    return console.log((new Error(v + " is not an Integer")).stack);
  } else {
    return v;
  }
};

param.Boolean = (v) => {
  if (!_.isBoolean(v)) {
    return console.log((new Error(v + " is not a Boolean")).stack);
  } else {
    return v;
  }
};

param.Object = (v) => {
  if (!_.isObject(v)) {
    return console.log((new Error(v + " is not an Object")).stack);
  } else {
    return v;
  }
};

param.Array = (v) => {
  if (!_.isArray(v)) {
    return console.log((new Error(v + " is not an Array")).stack);
  } else {
    return v;
  }
};

param.Function = (v) => {
  if (!_.isFunction(v)) {
    return console.log((new Error(v + " is not a Function")).stack);
  } else {
    return v;
  }
};

param.Test = (test, msg = '') => {
  if (!test) {
    return console.log((new Error("param.Test failed:" + msg)).stack);
  }
};

param.Compact = (types, args) => {
  var i, j, ref, results;
  results = [];
  for (i = j = 0, ref = args.length - 1; (0 <= ref ? j <= ref : j >= ref); i = 0 <= ref ? ++j : --j) {
    if (types[i] === 'S') {
      param.String(args[i]);
    }
    if (types[i] === 'N') {
      param.Number(args[i]);
    }
    if (types[i] === 'I') {
      param.Integer(args[i]);
    }
    if (types[i] === 'B') {
      param.Boolean(args[i]);
    }
    if (types[i] === 'O') {
      param.Object(args[i]);
    }
    if (types[i] === 'A') {
      param.Array(args[i]);
    }
    if (types[i] === 'F') {
      results.push(param.Function(args[i]));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

export var N = 8;

export var hexToBase64 = (str) => {
  return btoa(String.fromCharCode.apply(null, str.replace(/\r|\n/g, "").replace(/([\da-fA-F]{2}) ?/g, "0x$1 ").replace(/ +$/, "").split(" ")));
};

export var ass = (a, b) => {
  if (!_.isEqual(a, b)) {
    log('assert failure:');
    log(a);
    return log(b);
  }
};

export var lerp = (a, b, ratio) => {
  param.Number(a);
  param.Number(b);
  param.Number(ratio);
  return param.Number(a + (b - a) * ratio);
};

export var split = function(s) {
  param.String(s);
  return param.Array(s === "" ? [] : s.split(" ")); // there is a bug in split
};

export var col = (n) => {
  return modulo(n, N);
};

export var row = (n) => {
  return Math.floor(n / N);
};

export var sum = (arr) => {
  return arr.reduce(((a, b) => {
    return a + b;
  }), 0);
};

export var r4r = (a) => {
  return render(a, document.getElementById("app"));
};

export var spaceShip = (a, b) => {
  if (a < b) {
    return -1;
  } else if (a > b) {
    return 1;
  } else {
    return 0;
  }
};

export var map = _.map;

export var range = _.range;

export var log = console.log;

export var abs = Math.abs;

export var a = (...a) => {
  return h("a", a);
};

export var bold = (...a) => {
  return h("b", a);
};

export var br = (...a) => {
  return h("br", a);
};

export var button = (...a) => {
  return h("button", a);
};

export var circle = (...a) => {
  return h("circle", a);
};

export var defs = (...a) => {
  return h("defs", a);
};

export var div = (...a) => {
  return h("div", a);
};

export var ellipse = (...a) => {
  return h("ellipse", a);
};

export var figure = (...a) => {
  return h("figure", a);
};

export var figCaption = (...a) => {
  return h("figCaption", a);
};

export var form = (...a) => {
  return h("form", a);
};

export var g = (...a) => {
  return h("g", a);
};

export var h1 = (...a) => {
  return h("h1", a);
};

export var h3 = (...a) => {
  return h("h3", a);
};

export var header = (...a) => {
  return h("header", a);
};

export var img = (...a) => {
  return h("img", a);
};

export var input = (...a) => {
  return h("input", a);
};

export var li = (...a) => {
  return h("li", a);
};

export var linearGradient = (...a) => {
  return h("linearGradient", a);
};

export var option = (...a) => {
  return h("option", a);
};

export var p = (...a) => {
  return h("p", a);
};

export var table = (...a) => {
  return h("table", a);
};

export var tr = (...a) => {
  return h("tr", a);
};

export var td = (...a) => {
  return h("td", a);
};

export var rect = (...a) => {
  return h("rect", a);
};

export var select = (...a) => {
  return h("select", a);
};

export var stop = (...a) => {
  return h("stop", a);
};

export var strong = (...a) => {
  return h("strong", a);
};

export var svg = (...a) => {
  return h("svg", a);
};

export var text = (...a) => {
  return h("text", a);
};

export var ul = (...a) => {
  return h("ul", a);
};

export var Position = function(index) {
  return `${"abcdefgh"[col(index)]}${"87654321"[row(index)]}`;
};

export var createLocalStore = (name, init) => {
  var localState, setState, state;
  localState = localStorage.getItem(name);
  [state, setState] = createStore(localState ? JSON.parse(localState) : init);
  createEffect(() => {
    return localStorage.setItem(name, JSON.stringify(state));
  });
  return [state, setState];
};

export var removeIndex = (array, index) => {
  var b;
  // [...array.slice 0, index, ...array.slice index + 1]
  a = array.slice(0, index);
  b = array.slice(index + 1);
  console.log(a.concat(b));
  return a.concat(b);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-021-NYT-Digits-RPN\coffee\utils.coffee