// Generated by CoffeeScript 2.5.1
var Button, NumberButton, OperatorButton, SIZE, UndoButton, asserts, buttons, drawHistory, drawStack, finger, getTop2, history, numberButtons, numbers, operatorButtons, operators, setActive, stack, start, target, undoButton,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import _ from 'https://cdn.skypack.dev/lodash';

import {
  ass
} from '../js/utils.js';

SIZE = 50;

numbers = [5, 6, 9, 11, 15, 20];

target = 318;

stack = []; // index till NumberButtons

operators = "+-*/";

numberButtons = [];

operatorButtons = [];

undoButton = null;

buttons = [];

history = []; // texter och stack

// ["5 6 9 11 15 20",'']
start = new Date();

getTop2 = () => {
  var a, b, n;
  n = stack.length;
  a = stack[n - 1];
  b = stack[n - 2];
  a = buttons[a].text;
  b = buttons[b].text;
  if (a < b) {
    return [b, a];
  } else {
    return [a, b];
  }
};

setActive = () => {
  var a, b, button, j, len;
  if (stack.length >= 2) {
    operatorButtons[0].active = true;
    operatorButtons[1].active = true;
    operatorButtons[2].active = true;
    [a, b] = getTop2();
    operatorButtons[3].active = modulo(a, b) === 0;
  } else {
    for (j = 0, len = operatorButtons.length; j < len; j++) {
      button = operatorButtons[j];
      button.active = false;
    }
  }
  return undoButton.active = history.length > 0;
};

Button = class Button {
  constructor(index1, text1, x1, y1, active) {
    this.draw = this.draw.bind(this);
    this.inside = this.inside.bind(this);
    this.index = index1;
    this.text = text1;
    this.x = x1;
    this.y = y1;
    this.active = active;
  }

  draw() {
    var n, ref, ref1;
    n = stack.length;
    if (this.text === 0) {
      return;
    }
    push();
    fill('white');
    if (indexOf.call(numberButtons, this) >= 0) {
      if (ref = this.index, indexOf.call(stack, ref) >= 0) {
        fill('yellow');
      }
      if (ref1 = this.index, indexOf.call(stack.slice(n - 2, n), ref1) >= 0) {
        fill('green');
      }
    }
    circle(this.x, this.y, SIZE);
    fill(this.active ? 'black' : 'lightgray');
    textSize([40, 30, 30, 25, 20, 15, 12, 10, 8, 6, 5, 4, 3, 2][str(this.text).length]);
    text(this.text, this.x, this.y + 3);
    return pop();
  }

  inside(mx, my) {
    var dx, dy;
    dx = mx - this.x;
    dy = my - this.y;
    return dx * dx + dy * dy < SIZE / 2 * SIZE / 2;
  }

};

UndoButton = class UndoButton extends Button {
  constructor() {
    super(...arguments);
    this.click = this.click.bind(this);
  }

  click() {
    var i, j, len, text, texter;
    boundMethodCheck(this, UndoButton);
    if (history.length === 1) {
      return;
    }
    history.pop();
    [texter, stack] = _.last(history);
    stack = stack.slice();
    for (i = j = 0, len = texter.length; j < len; i = ++j) {
      text = texter[i];
      numberButtons[i].text = text;
    }
    return setActive();
  }

};

NumberButton = class NumberButton extends Button {
  constructor() {
    super(...arguments);
    this.click = this.click.bind(this);
  }

  click() {
    boundMethodCheck(this, NumberButton);
    stack.push(this.index);
    return setActive();
  }

};

OperatorButton = class OperatorButton extends Button {
  constructor() {
    super(...arguments);
    this.click = this.click.bind(this);
  }

  click() {
    var a, b, c, n, texter, x, y;
    boundMethodCheck(this, OperatorButton);
    n = stack.length;
    if (n >= 2) {
      [a, b] = getTop2();
      c = 0;
      if (this.text === '+') {
        c = a + b;
      }
      if (this.text === '-') {
        c = a - b;
      }
      if (this.text === '*') {
        c = a * b;
      }
      if (this.text === '/' && modulo(a, b) === 0) {
        c = Math.floor(a / b);
      }
      if (c > 0) {
        numberButtons[stack[n - 1]].text = c;
        numberButtons[stack[n - 2]].text = 0;
        texter = _.map(numberButtons, (b) => {
          return b.text;
        });
        history.push([texter.slice(), stack.slice()]);
        x = stack.pop();
        y = stack.pop();
        stack.push(x);
        return setActive();
      }
    }
  }

};

window.setup = () => {
  var i, j, k, len, len1, number, operator, stackf, textf, x, y;
  createCanvas(800, 300);
  noLoop();
  textAlign(CENTER, CENTER);
  textSize(30);
  for (i = j = 0, len = numbers.length; j < len; i = ++j) {
    number = numbers[i];
    x = 100 + 10 + i % 3 * (SIZE + 10);
    y = 100 + Math.floor(i / 3) * (SIZE + 10);
    numberButtons.push(new NumberButton(i, number, x, y, true));
  }
  y = 225;
  for (i = k = 0, len1 = operators.length; k < len1; i = ++k) {
    operator = operators[i];
    x = 50 + i % 4 * (SIZE + 10);
    operatorButtons.push(new OperatorButton(i, operator, x, y, false));
  }
  x = 95 + 4 * SIZE;
  undoButton = new UndoButton(0, 'undo', x, y, false);
  buttons = [...numberButtons, ...operatorButtons, undoButton];
  textf = _.map(numberButtons, (b) => {
    return b.text;
  });
  textf = textf.slice();
  stackf = stack.slice();
  history = [[textf, stackf]];
  return asserts();
};

window.mousePressed = () => {
  var button, j, len, results;
  results = [];
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    if (button.inside(mouseX, mouseY)) {
      button.click();
      results.push(draw());
    } else {
      results.push(void 0);
    }
  }
  return results;
};

window.draw = () => {
  var button, j, len;
  background('gray');
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    button.draw();
  }
  push();
  textSize(50);
  text(target, 175, 45);
  pop();
  drawHistory();
  return drawStack();
};

drawStack = () => {
  var i, item, j, len;
  push();
  textSize(30);
  for (i = j = 0, len = stack.length; j < len; i = ++j) {
    item = stack[i];
    text(numberButtons[item].text, 650, 40 + i * 40);
  }
  return pop();
};

drawHistory = () => {
  var i, item, j, len, stackf, textf;
  push();
  textSize(30);
  for (i = j = 0, len = history.length; j < len; i = ++j) {
    item = history[i];
    [textf, stackf] = item;
    text(textf.join(' ') + ' | ' + stackf.join(' '), 450, 40 + i * 40);
  }
  //text "#{c} = #{a} #{op} #{b}", 450, 40 + i*40
  return pop();
};

// if history.length == 0 then return
// if _.last(history)[0] == target
// 	push()
// 	textSize 30
// 	text "Well done!", 450, 40 + history.length*40
// 	textSize 20
// 	text "#{(new Date() - start)} ms", 450, 80 + history.length*40
// 	pop()
/* TESTING */
finger = (commands) => {
  var command, i, j, k, len, len1, number, stackf, textf;
  for (i = j = 0, len = numbers.length; j < len; i = ++j) {
    number = numbers[i];
    numberButtons[i].text = number;
  }
  stack = [];
  for (k = 0, len1 = commands.length; k < len1; k++) {
    command = commands[k];
    if (command === '0') {
      numberButtons[0].click();
    }
    if (command === '1') {
      numberButtons[1].click();
    }
    if (command === '2') {
      numberButtons[2].click();
    }
    if (command === '3') {
      numberButtons[3].click();
    }
    if (command === '4') {
      numberButtons[4].click();
    }
    if (command === '5') {
      numberButtons[5].click();
    }
    if (command === '+') {
      operatorButtons[0].click();
    }
    if (command === '-') {
      operatorButtons[1].click();
    }
    if (command === '*') {
      operatorButtons[2].click();
    }
    if (command === '/') {
      operatorButtons[3].click();
    }
    if (command === 'Z') {
      undoButton.click();
    }
  }
  textf = _.map(numberButtons, (button) => {
    return button.text;
  });
  textf = textf.join(' ');
  stackf = _.map(stack, (index) => {
    return numberButtons[index].text;
  });
  stackf = stackf.join(' ');
  return [textf, stackf];
};

asserts = () => {
  return;
  ass(['5 6 9 11 15 20', ''], finger(''));
  ass(['5 6 9 11 15 20', '5'], finger('0'));
  ass(['5 6 9 11 15 20', '5 6'], finger('01'));
  ass(['5 6 9 11 15 20', '5 6 9'], finger('012'));
  ass(['5 0 15 11 15 20', '5 15'], finger('012+'));
  ass(['5 6 9 11 15 20', '5 6 9'], finger('012+Z'));
  ass(['0 0 20 11 15 20', '20'], finger('012++'));
  return ass(['5 0 15 11 15 20', '5 15'], finger('012++Z'));
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-021-NYT-Digits-RPN\coffee\sketch.coffee