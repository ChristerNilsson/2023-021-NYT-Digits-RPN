// Generated by CoffeeScript 2.5.1
var Button, NumberButton, OperatorButton, SIZE, UndoButton, buttons, count, drawHistory, drawStack, getTop2, history, numberButtons, numbers, operatorButtons, operators, setActive, stack, start, target, undoButton,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import _ from 'https://cdn.skypack.dev/lodash';

// import {ass} from '../js/utils.js'
SIZE = 50;

numbers = [5, 6, 9, 11, 15, 20];

target = 318;

stack = []; // NumberButtons

operators = "+-*/";

numberButtons = [];

operatorButtons = [];

undoButton = null;

buttons = [];

history = [];

count = 0; // antal element på stacken pushats sedan föregående operation

start = new Date();

getTop2 = () => {
  var a, b, n;
  n = stack.length;
  [a, b] = [stack[n - 1].text, stack[n - 2].text];
  if (a < b) {
    return [b, a];
  } else {
    return [a, b];
  }
};

setActive = () => {
  var a, b, button, j, len;
  if (stack.length >= 2) {
    operatorButtons[0].active = true;
    operatorButtons[1].active = true;
    operatorButtons[2].active = true;
    [a, b] = getTop2();
    operatorButtons[3].active = modulo(a, b) === 0;
  } else {
    for (j = 0, len = operatorButtons.length; j < len; j++) {
      button = operatorButtons[j];
      button.active = false;
    }
  }
  return undoButton.active = history.length > 0;
};

Button = class Button {
  constructor(text1, x1, y1, active) {
    this.draw = this.draw.bind(this);
    this.inside = this.inside.bind(this);
    this.text = text1;
    this.x = x1;
    this.y = y1;
    this.active = active;
  }

  draw() {
    var n;
    n = stack.length;
    if (this.text === "") {
      return;
    }
    push();
    fill('white');
    if (indexOf.call(stack, this) >= 0) {
      fill('yellow');
    }
    if (indexOf.call(stack.slice(n - 2, n), this) >= 0) {
      fill('green');
    }
    circle(this.x, this.y, SIZE);
    fill(this.active ? 'black' : 'lightgray');
    textSize([40, 30, 30, 25, 20, 15, 12, 10, 8, 6, 5, 4, 3, 2][str(this.text).length]);
    text(this.text, this.x, this.y + 3);
    return pop();
  }

  inside(mx, my) {
    var dx, dy;
    dx = mx - this.x;
    dy = my - this.y;
    return dx * dx + dy * dy < SIZE / 2 * SIZE / 2;
  }

};

UndoButton = class UndoButton extends Button {
  constructor() {
    super(...arguments);
    this.click = this.click.bind(this);
  }

  click() {
    var a, b, c, i, j, k, len, len1, ref, text, texter;
    boundMethodCheck(this, UndoButton);
    if (history.length === 0) {
      return;
    }
    [c, a, text, b, texter, count] = history.pop();
    for (i = j = 0, len = texter.length; j < len; i = ++j) {
      text = texter[i];
      numberButtons[i].text = text;
    }
    ref = _.range(count);
    for (k = 0, len1 = ref.length; k < len1; k++) {
      i = ref[k];
      stack.pop();
    }
    return setActive();
  }

};

NumberButton = class NumberButton extends Button {
  constructor() {
    super(...arguments);
    this.click = this.click.bind(this);
  }

  click() {
    boundMethodCheck(this, NumberButton);
    count += 1;
    stack.push(this);
    return setActive();
  }

};

OperatorButton = class OperatorButton extends Button {
  constructor() {
    super(...arguments);
    this.click = this.click.bind(this);
  }

  click() {
    var a, b, c, n, texter, x, y;
    boundMethodCheck(this, OperatorButton);
    n = stack.length;
    if (n >= 2) {
      [a, b] = getTop2();
      c = 0;
      if (this.text === '+') {
        c = a + b;
      }
      if (this.text === '-') {
        c = a - b;
      }
      if (this.text === '*') {
        c = a * b;
      }
      if (this.text === '/' && modulo(a, b) === 0) {
        c = Math.floor(a / b);
      }
      if (c > 0) {
        texter = _.map(numberButtons, (b) => {
          return b.text;
        });
        history.push([c, a, this.text, b, texter, count]);
        stack[n - 1].text = c;
        stack[n - 2].text = "";
        x = stack.pop();
        y = stack.pop();
        stack.push(x);
        count = 0;
        return setActive();
      }
    }
  }

};

window.setup = () => {
  var i, j, k, len, len1, number, operator, x, y;
  createCanvas(800, 300);
  noLoop();
  textAlign(CENTER, CENTER);
  textSize(30);
  for (i = j = 0, len = numbers.length; j < len; i = ++j) {
    number = numbers[i];
    x = 100 + 10 + i % 3 * (SIZE + 10);
    y = 100 + Math.floor(i / 3) * (SIZE + 10);
    numberButtons.push(new NumberButton(number, x, y, true));
  }
  y = 225;
  for (i = k = 0, len1 = operators.length; k < len1; i = ++k) {
    operator = operators[i];
    x = 50 + i % 4 * (SIZE + 10);
    operatorButtons.push(new OperatorButton(operator, x, y, false));
  }
  x = 95 + 4 * SIZE;
  undoButton = new UndoButton('undo', x, y, false);
  return buttons = [...numberButtons, ...operatorButtons, undoButton];
};

window.mousePressed = () => {
  var button, j, len, results;
  results = [];
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    if (button.inside(mouseX, mouseY)) {
      button.click();
      results.push(draw());
    } else {
      results.push(void 0);
    }
  }
  return results;
};

window.draw = () => {
  var button, j, len;
  background('gray');
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    button.draw();
  }
  push();
  textSize(50);
  text(target, 175, 45);
  pop();
  drawHistory();
  return drawStack();
};

drawStack = () => {
  var i, item, j, len;
  push();
  textSize(30);
  for (i = j = 0, len = stack.length; j < len; i = ++j) {
    item = stack[i];
    text(item.text, 650, 40 + i * 40);
  }
  return pop();
};

drawHistory = () => {
  var a, b, c, i, item, j, len, op;
  push();
  textSize(30);
  for (i = j = 0, len = history.length; j < len; i = ++j) {
    item = history[i];
    [c, a, op, b] = item;
    text(`${c} = ${a} ${op} ${b}`, 450, 40 + i * 40);
  }
  pop();
  if (history.length === 0) {
    return;
  }
  if (_.last(history)[0] === target) {
    push();
    textSize(30);
    text("Well done!", 450, 40 + history.length * 40);
    textSize(20);
    text(`${new Date() - start} ms`, 450, 80 + history.length * 40);
    return pop();
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsTUFBQSxFQUFBLFlBQUEsRUFBQSxjQUFBLEVBQUEsSUFBQSxFQUFBLFVBQUEsRUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLFdBQUEsRUFBQSxTQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxhQUFBLEVBQUEsT0FBQSxFQUFBLGVBQUEsRUFBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLFVBQUE7RUFBQTs7OztBQUFBLE9BQU8sQ0FBUCxNQUFBLGlDQUFBOzs7QUFHQSxJQUFBLEdBQU87O0FBRVAsT0FBQSxHQUFVLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sRUFBUCxFQUFVLEVBQVYsRUFBYSxFQUFiOztBQUNWLE1BQUEsR0FBUzs7QUFDVCxLQUFBLEdBQVEsR0FQUjs7QUFTQSxTQUFBLEdBQVk7O0FBQ1osYUFBQSxHQUFnQjs7QUFDaEIsZUFBQSxHQUFrQjs7QUFDbEIsVUFBQSxHQUFhOztBQUNiLE9BQUEsR0FBVTs7QUFDVixPQUFBLEdBQVU7O0FBQ1YsS0FBQSxHQUFRLEVBZlI7O0FBaUJBLEtBQUEsR0FBUSxJQUFJLElBQUosQ0FBQTs7QUFFUixPQUFBLEdBQVUsQ0FBQSxDQUFBLEdBQUE7QUFDVixNQUFBLENBQUEsRUFBQSxDQUFBLEVBQUE7RUFBQyxDQUFBLEdBQUksS0FBSyxDQUFDO0VBQ1YsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFBLEdBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQSxHQUFFLENBQUgsQ0FBSyxDQUFDLElBQVosRUFBaUIsS0FBSyxDQUFDLENBQUEsR0FBRSxDQUFILENBQUssQ0FBQyxJQUE1QjtFQUNSLElBQUcsQ0FBQSxHQUFJLENBQVA7V0FBYyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQWQ7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UUFBQSxDQUFTLEVBQVQ7SUFDQSxJQUFBLENBQUssWUFBTCxFQUFtQixHQUFuQixFQUF3QixFQUFBLEdBQUssT0FBTyxDQUFDLE1BQVIsR0FBZSxFQUE1QztJQUNBLFFBQUEsQ0FBUyxFQUFUO0lBQ0EsSUFBQSxDQUFLLENBQUEsQ0FBQSxDQUFJLElBQUksSUFBSixDQUFBLENBQUEsR0FBYSxLQUFqQixDQUFBLEdBQUEsQ0FBTCxFQUFtQyxHQUFuQyxFQUF3QyxFQUFBLEdBQUssT0FBTyxDQUFDLE1BQVIsR0FBZSxFQUE1RDtXQUNBLEdBQUEsQ0FBQSxFQU5EOztBQVJhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnaHR0cHM6Ly9jZG4uc2t5cGFjay5kZXYvbG9kYXNoJ1xyXG4jIGltcG9ydCB7YXNzfSBmcm9tICcuLi9qcy91dGlscy5qcydcclxuXHJcblNJWkUgPSA1MFxyXG5cclxubnVtYmVycyA9IFs1LDYsOSwxMSwxNSwyMF1cclxudGFyZ2V0ID0gMzE4XHJcbnN0YWNrID0gW10gIyBOdW1iZXJCdXR0b25zXHJcblxyXG5vcGVyYXRvcnMgPSBcIistKi9cIlxyXG5udW1iZXJCdXR0b25zID0gW11cclxub3BlcmF0b3JCdXR0b25zID0gW11cclxudW5kb0J1dHRvbiA9IG51bGxcclxuYnV0dG9ucyA9IFtdXHJcbmhpc3RvcnkgPSBbXVxyXG5jb3VudCA9IDAgIyBhbnRhbCBlbGVtZW50IHDDpSBzdGFja2VuIHB1c2hhdHMgc2VkYW4gZsO2cmVnw6VlbmRlIG9wZXJhdGlvblxyXG5cclxuc3RhcnQgPSBuZXcgRGF0ZSgpXHJcblxyXG5nZXRUb3AyID0gKCkgPT5cclxuXHRuID0gc3RhY2subGVuZ3RoXHJcblx0W2EsYl0gPSBbc3RhY2tbbi0xXS50ZXh0LHN0YWNrW24tMl0udGV4dF1cclxuXHRpZiBhIDwgYiB0aGVuIFtiLGFdIGVsc2UgW2EsYl1cclxuXHJcbnNldEFjdGl2ZSA9ID0+XHJcblx0aWYgc3RhY2subGVuZ3RoID49IDJcclxuXHRcdG9wZXJhdG9yQnV0dG9uc1swXS5hY3RpdmUgPSB0cnVlXHJcblx0XHRvcGVyYXRvckJ1dHRvbnNbMV0uYWN0aXZlID0gdHJ1ZVxyXG5cdFx0b3BlcmF0b3JCdXR0b25zWzJdLmFjdGl2ZSA9IHRydWVcclxuXHRcdFthLGJdID0gZ2V0VG9wMigpXHJcblx0XHRvcGVyYXRvckJ1dHRvbnNbM10uYWN0aXZlID0gYSUlYj09MFxyXG5cdGVsc2VcclxuXHRcdGZvciBidXR0b24gaW4gb3BlcmF0b3JCdXR0b25zXHJcblx0XHRcdGJ1dHRvbi5hY3RpdmUgPSBmYWxzZVxyXG5cdHVuZG9CdXR0b24uYWN0aXZlID0gaGlzdG9yeS5sZW5ndGggPiAwXHJcblxyXG5jbGFzcyBCdXR0b25cclxuXHRjb25zdHJ1Y3RvciA6IChAdGV4dCxAeCxAeSxAYWN0aXZlKSAtPlxyXG5cdGRyYXcgOiA9PlxyXG5cdFx0biA9IHN0YWNrLmxlbmd0aFxyXG5cdFx0aWYgQHRleHQgPT0gXCJcIiB0aGVuIHJldHVyblxyXG5cdFx0cHVzaCgpXHJcblx0XHRmaWxsICd3aGl0ZSdcclxuXHRcdGlmIEAgaW4gc3RhY2sgdGhlbiBmaWxsICd5ZWxsb3cnIFxyXG5cdFx0aWYgQCBpbiBzdGFjay5zbGljZSBuLTIsbiB0aGVuIGZpbGwgJ2dyZWVuJyBcclxuXHRcdGNpcmNsZSBAeCxAeSxTSVpFXHJcblx0XHRmaWxsIGlmIEBhY3RpdmUgdGhlbiAnYmxhY2snIGVsc2UgJ2xpZ2h0Z3JheSdcclxuXHRcdHRleHRTaXplIFs0MCwzMCwzMCwyNSwyMCwxNSwxMiwxMCw4LDYsNSw0LDMsMl1bc3RyKEB0ZXh0KS5sZW5ndGhdXHJcblx0XHR0ZXh0IEB0ZXh0LEB4LEB5KzNcclxuXHRcdHBvcCgpXHJcblx0aW5zaWRlIDogKG14LG15KSA9PlxyXG5cdFx0ZHggPSBteC1AeFxyXG5cdFx0ZHkgPSBteS1AeVxyXG5cdFx0ZHgqZHggKyBkeSpkeSA8IFNJWkUvMiAqIFNJWkUvMlxyXG5cclxuY2xhc3MgVW5kb0J1dHRvbiBleHRlbmRzIEJ1dHRvblxyXG5cdGNsaWNrIDogPT5cclxuXHRcdGlmIGhpc3RvcnkubGVuZ3RoID09IDAgdGhlbiByZXR1cm5cclxuXHRcdFtjLGEsdGV4dCxiLHRleHRlcixjb3VudF0gPSBoaXN0b3J5LnBvcCgpXHJcblx0XHRmb3IgdGV4dCxpIGluIHRleHRlclxyXG5cdFx0XHRudW1iZXJCdXR0b25zW2ldLnRleHQgPSB0ZXh0XHJcblx0XHRmb3IgaSBpbiBfLnJhbmdlIGNvdW50XHJcblx0XHRcdHN0YWNrLnBvcCgpXHJcblx0XHRzZXRBY3RpdmUoKVxyXG5cclxuY2xhc3MgTnVtYmVyQnV0dG9uIGV4dGVuZHMgQnV0dG9uXHJcblx0Y2xpY2sgOiA9PlxyXG5cdFx0Y291bnQgKz0gMVxyXG5cdFx0c3RhY2sucHVzaCBAXHJcblx0XHRzZXRBY3RpdmUoKVxyXG5cclxuY2xhc3MgT3BlcmF0b3JCdXR0b24gZXh0ZW5kcyBCdXR0b25cclxuXHRjbGljayA6ID0+XHJcblx0XHRuID0gc3RhY2subGVuZ3RoXHJcblx0XHRpZiBuID49IDJcclxuXHRcdFx0W2EsYl0gPSBnZXRUb3AyKClcclxuXHRcdFx0YyA9IDBcclxuXHRcdFx0aWYgQHRleHQgPT0gJysnIHRoZW4gYyA9YStiXHJcblx0XHRcdGlmIEB0ZXh0ID09ICctJyB0aGVuIGMgPWEtYlxyXG5cdFx0XHRpZiBAdGV4dCA9PSAnKicgdGhlbiBjID1hKmJcclxuXHRcdFx0aWYgQHRleHQgPT0gJy8nIGFuZCBhJSViPT0wIHRoZW4gYyA9YS8vYlxyXG5cdFx0XHRpZiBjID4gMFxyXG5cdFx0XHRcdHRleHRlciA9IF8ubWFwIG51bWJlckJ1dHRvbnMsIChiKSA9PiBiLnRleHRcclxuXHRcdFx0XHRoaXN0b3J5LnB1c2ggW2MsYSxAdGV4dCxiLHRleHRlcixjb3VudF1cclxuXHRcdFx0XHRzdGFja1tuLTFdLnRleHQgPSBjXHJcblx0XHRcdFx0c3RhY2tbbi0yXS50ZXh0ID0gXCJcIlxyXG5cdFx0XHRcdHggPSBzdGFjay5wb3AoKVxyXG5cdFx0XHRcdHkgPSBzdGFjay5wb3AoKVxyXG5cdFx0XHRcdHN0YWNrLnB1c2ggeFxyXG5cdFx0XHRcdGNvdW50ID0gMFxyXG5cdFx0XHRcdHNldEFjdGl2ZSgpXHJcblxyXG53aW5kb3cuc2V0dXAgPSA9PlxyXG5cdGNyZWF0ZUNhbnZhcyA4MDAsMzAwXHJcblx0bm9Mb29wKClcclxuXHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxyXG5cdHRleHRTaXplIDMwXHJcblxyXG5cdGZvciBudW1iZXIsaSBpbiBudW1iZXJzXHJcblx0XHR4ID0gMTAwKzEwICsgaSUzICogKFNJWkUrMTApXHJcblx0XHR5ID0gMTAwICsgaS8vMyAqIChTSVpFKzEwKVxyXG5cdFx0bnVtYmVyQnV0dG9ucy5wdXNoIG5ldyBOdW1iZXJCdXR0b24gbnVtYmVyLHgseSx0cnVlXHJcblxyXG5cdHkgPSAyMjVcclxuXHRmb3Igb3BlcmF0b3IsaSBpbiBvcGVyYXRvcnNcclxuXHRcdHggPSA1MCArIGklNCAqIChTSVpFKzEwKVxyXG5cdFx0b3BlcmF0b3JCdXR0b25zLnB1c2ggbmV3IE9wZXJhdG9yQnV0dG9uIG9wZXJhdG9yLHgseSxmYWxzZVxyXG5cclxuXHR4ID0gOTUgKyA0ICogU0laRVxyXG5cdHVuZG9CdXR0b24gPSBuZXcgVW5kb0J1dHRvbiAndW5kbycseCx5LGZhbHNlXHJcblxyXG5cdGJ1dHRvbnMgPSBbbnVtYmVyQnV0dG9ucy4uLiwgb3BlcmF0b3JCdXR0b25zLi4uLCB1bmRvQnV0dG9uXVxyXG5cclxud2luZG93Lm1vdXNlUHJlc3NlZCA9ID0+XHJcblx0Zm9yIGJ1dHRvbiBpbiBidXR0b25zXHJcblx0XHRpZiBidXR0b24uaW5zaWRlIG1vdXNlWCxtb3VzZVlcclxuXHRcdFx0YnV0dG9uLmNsaWNrKClcclxuXHRcdFx0ZHJhdygpXHJcblxyXG53aW5kb3cuZHJhdyA9ID0+XHJcblx0YmFja2dyb3VuZCAnZ3JheSdcclxuXHRmb3IgYnV0dG9uIGluIGJ1dHRvbnNcclxuXHRcdGJ1dHRvbi5kcmF3KClcclxuXHRwdXNoKClcclxuXHR0ZXh0U2l6ZSA1MFxyXG5cdHRleHQgdGFyZ2V0LDE3NSw0NVxyXG5cdHBvcCgpXHJcblx0ZHJhd0hpc3RvcnkoKVxyXG5cdGRyYXdTdGFjaygpXHJcblxyXG5kcmF3U3RhY2sgPSAoKSA9PlxyXG5cdHB1c2goKVxyXG5cdHRleHRTaXplIDMwXHJcblx0Zm9yIGl0ZW0saSBpbiBzdGFja1xyXG5cdFx0dGV4dCBpdGVtLnRleHQsIDY1MCwgNDAgKyBpKjQwXHJcblx0cG9wKClcclxuXHJcbmRyYXdIaXN0b3J5ID0gPT5cclxuXHRwdXNoKClcclxuXHR0ZXh0U2l6ZSAzMFxyXG5cdGZvciBpdGVtLGkgaW4gaGlzdG9yeVxyXG5cdFx0W2MsYSxvcCxiXSA9IGl0ZW1cclxuXHRcdHRleHQgXCIje2N9ID0gI3thfSAje29wfSAje2J9XCIsIDQ1MCwgNDAgKyBpKjQwXHJcblx0cG9wKClcclxuXHRpZiBoaXN0b3J5Lmxlbmd0aCA9PSAwIHRoZW4gcmV0dXJuXHJcblx0aWYgXy5sYXN0KGhpc3RvcnkpWzBdID09IHRhcmdldFxyXG5cdFx0cHVzaCgpXHJcblx0XHR0ZXh0U2l6ZSAzMFxyXG5cdFx0dGV4dCBcIldlbGwgZG9uZSFcIiwgNDUwLCA0MCArIGhpc3RvcnkubGVuZ3RoKjQwXHJcblx0XHR0ZXh0U2l6ZSAyMFxyXG5cdFx0dGV4dCBcIiN7KG5ldyBEYXRlKCkgLSBzdGFydCl9IG1zXCIsIDQ1MCwgODAgKyBoaXN0b3J5Lmxlbmd0aCo0MFxyXG5cdFx0cG9wKClcclxuIl19
//# sourceURL=c:\github\2023-021-NYT-Digits-RPN\coffee\sketch.coffee