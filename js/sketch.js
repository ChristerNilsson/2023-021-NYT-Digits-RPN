// Generated by CoffeeScript 2.5.1
var Button, NumberButton, OperatorButton, SIZE, UndoButton, buttons, drawHistory, getMarked, history, marked, numberButtons, numbers, operatorButtons, operators, setActive, start, target, undoButton,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import _ from 'https://cdn.skypack.dev/lodash';

// import {ass} from '../js/utils.js'
SIZE = 50;

numbers = [24, 8, 10, 20, 5, 15];

target = 497;

operators = "+ - * /".split(' ');

numberButtons = [];

operatorButtons = [];

undoButton = null;

buttons = [];

history = [];

marked = [];

start = new Date();

getMarked = () => {
  var a, b;
  [a, b] = [marked[0].text, marked[1].text];
  if (a < b) {
    return [b, a];
  } else {
    return [a, b];
  }
};

setActive = () => {
  var a, b, button, j, len, results;
  if (marked.length === 2) {
    operatorButtons[0].active = true;
    operatorButtons[1].active = true;
    operatorButtons[2].active = true;
    [a, b] = getMarked();
    return operatorButtons[3].active = modulo(a, b) === 0;
  } else {
    results = [];
    for (j = 0, len = operatorButtons.length; j < len; j++) {
      button = operatorButtons[j];
      results.push(button.active = false);
    }
    return results;
  }
};

Button = class Button {
  constructor(text1, x1, y1, active) {
    this.draw = this.draw.bind(this);
    this.inside = this.inside.bind(this);
    this.mark = this.mark.bind(this);
    this.text = text1;
    this.x = x1;
    this.y = y1;
    this.active = active;
  }

  draw() {
    if (this.text === "") {
      return;
    }
    push();
    fill(indexOf.call(marked, this) >= 0 ? 'green' : 'white');
    circle(this.x, this.y, SIZE);
    fill(this.active ? 'black' : 'lightgray');
    textSize([40, 30, 30, 25, 20, 15, 12, 10, 8, 6, 5, 4, 3, 2][str(this.text).length]);
    text(this.text, this.x, this.y + 3);
    return pop();
  }

  inside(mx, my) {
    var dx, dy;
    dx = mx - this.x;
    dy = my - this.y;
    return dx * dx + dy * dy < SIZE / 2 * SIZE / 2;
  }

  mark() {
    marked.push(this);
    if (marked.length > 2) {
      return marked.shift();
    }
  }

};

UndoButton = class UndoButton extends Button {
  constructor() {
    super(...arguments);
    this.click = this.click.bind(this);
  }

  click() {
    var a, b, c, i, j, len, text, texter;
    boundMethodCheck(this, UndoButton);
    if (history.length === 0) {
      return;
    }
    [c, a, text, b, texter] = history.pop();
    for (i = j = 0, len = texter.length; j < len; i = ++j) {
      text = texter[i];
      numberButtons[i].text = text;
    }
    marked = [];
    setActive();
    this.active = history.length > 0;
  }

};

NumberButton = class NumberButton extends Button {
  constructor() {
    super(...arguments);
    this.click = this.click.bind(this);
  }

  click() {
    boundMethodCheck(this, NumberButton);
    this.mark();
    return setActive();
  }

};

OperatorButton = class OperatorButton extends Button {
  constructor() {
    super(...arguments);
    this.click = this.click.bind(this);
  }

  click() {
    var a, b, c, texter;
    boundMethodCheck(this, OperatorButton);
    if (marked.length === 2) {
      [a, b] = getMarked();
      c = 0;
      if (this.text === '+') {
        c = a + b;
      }
      if (this.text === '-') {
        c = a - b;
      }
      if (this.text === '*') {
        c = a * b;
      }
      if (this.text === '/' && modulo(a, b) === 0) {
        c = Math.floor(a / b);
      }
      if (c > 0) {
        texter = _.map(numberButtons, (b) => {
          return b.text;
        });
        history.push([c, a, this.text, b, texter]);
        marked[0].text = "";
        marked[1].text = c;
        marked.shift();
        return undoButton.active = history.length > 0;
      }
    }
  }

};

window.setup = () => {
  var i, j, k, len, len1, number, operator, x, y;
  createCanvas(600, 300);
  noLoop();
  textAlign(CENTER, CENTER);
  textSize(30);
  for (i = j = 0, len = numbers.length; j < len; i = ++j) {
    number = numbers[i];
    x = 100 + 10 + i % 3 * (SIZE + 10);
    y = 100 + Math.floor(i / 3) * (SIZE + 10);
    numberButtons.push(new NumberButton(number, x, y, true));
  }
  y = 225;
  for (i = k = 0, len1 = operators.length; k < len1; i = ++k) {
    operator = operators[i];
    x = 50 + i % 4 * (SIZE + 10);
    operatorButtons.push(new OperatorButton(operator, x, y, false));
  }
  x = 95 + 4 * SIZE;
  undoButton = new UndoButton('undo', x, y, false);
  buttons = [...numberButtons, ...operatorButtons, undoButton];
  return console.log(buttons);
};

window.mousePressed = () => {
  var button, j, len, results;
  results = [];
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    if (button.inside(mouseX, mouseY)) {
      button.click();
      results.push(draw());
    } else {
      results.push(void 0);
    }
  }
  return results;
};

window.draw = () => {
  var button, j, len;
  background('gray');
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    button.draw();
  }
  push();
  textSize(50);
  text(target, 175, 45);
  pop();
  return drawHistory();
};

drawHistory = () => {
  var a, b, c, i, item, j, len, op;
  push();
  textSize(30);
  for (i = j = 0, len = history.length; j < len; i = ++j) {
    item = history[i];
    [c, a, op, b] = item;
    text(`${c} = ${a} ${op} ${b}`, 450, 40 + i * 40);
  }
  pop();
  if (history.length === 0) {
    return;
  }
  if (_.last(history)[0] === target) {
    push();
    textSize(30);
    text("Well done!", 450, 40 + history.length * 40);
    textSize(20);
    text(`${new Date() - start} ms`, 450, 80 + history.length * 40);
    return pop();
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-021-NYT-Digits-RPN\coffee\sketch.coffee